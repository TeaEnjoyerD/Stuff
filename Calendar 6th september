<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Cozy Autumn</title>
  <style>
    :root { --text-shadow: 2px 2px 4px rgba(0,0,0,0.7); }
    * { box-sizing: border-box; margin:0; padding:0; }
    body { height: 100vh; overflow: hidden; position: relative; font-family: system-ui, sans-serif; }

    body::before {
      content: "";
      position: fixed;
      inset: 0;
      background: #d2691e;
      z-index: -3;
    }

    #collage { position: fixed; inset: 0; z-index: 1; pointer-events: none; }
    #clouds { position: fixed; inset: 0; z-index: 2; pointer-events: none; }
    #fog { position: fixed; inset: 0; z-index: 3; pointer-events: none; }
    #overlay { position: fixed; inset: 0; background: rgba(0,0,0,0.3); z-index: 4; display: none; pointer-events: none; }
    #date { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10; font-size: 28px; padding: 8px 14px; border-radius: 12px; background: rgba(0,0,0,0.18); backdrop-filter: blur(3px); color: #fff; text-shadow: var(--text-shadow); }
    #startSound { position: absolute; left: 50%; bottom: 20px; transform: translateX(-50%); z-index: 20; padding: 10px 18px; border: none; border-radius: 10px; font-size: 16px; color: #fff; background: rgba(0,0,0,0.35); backdrop-filter: blur(6px); cursor: pointer; }
    canvas { position: fixed; inset: 0; width: 100vw; height: 100vh; z-index: 5; pointer-events: none; }
    #errors { position: fixed; right: 10px; bottom: 10px; z-index: 30; max-width: 40ch; padding: 8px 10px; border-radius: 8px; font: 12px/1.3 system-ui, sans-serif; background: rgba(0,0,0,0.6); color: #ffdddd; display: none; white-space: pre-wrap; }

    .cloud { position: absolute; background: rgba(255,255,255,0.8); border-radius: 50%; filter: blur(12px); }
    .fog { position: absolute; background: rgba(255,255,255,0.25); border-radius: 50%; filter: blur(40px); }

    /* LEAF CARPET STYLES */
    #leafCarpet {
      position: fixed;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 120px;
      z-index: 2;
      pointer-events: none;
      overflow: hidden;
    }
  </style>
</head>
<body>
  <div id="date"></div>
  <button id="startSound">â–¶ Play Sound</button>
  <div id="collage"></div>
  <div id="clouds"></div>
  <div id="fog"></div>
  <div id="overlay"></div>
  <div id="leafCarpet"></div>
  <canvas id="canvas"></canvas>
  <div id="errors"></div>

  <script>
    // ---------- DATE ----------
    const dateEl = document.getElementById("date");
    const now = new Date();
    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    dateEl.textContent = now.toLocaleDateString("en-US", options);

    // ---------- PATHS ----------
    const leafSources = [
      "autumn/images_autumn/leaves/leaf1.png",
      "autumn/images_autumn/leaves/leaf2.png",
      "autumn/images_autumn/leaves/leaf3.png",
      "autumn/images_autumn/leaves/leaf4.png"
    ];

    const collageElements = [
      "autumn/images_autumn/coffee/coffee1.png",
      "autumn/images_autumn/coffee/coffee2.png",
      "autumn/images_autumn/pumpkins/pumpkin1.png",
      "autumn/images_autumn/pumpkins/pumpkin2.png",
      "autumn/images_autumn/books/book1.png",
      "autumn/images_autumn/books/book2.png"
    ];

    // ---------- PRELOAD HELPERS ----------
    const errorsBox = document.getElementById("errors");
    function showError(msg) { errorsBox.style.display = "block"; errorsBox.textContent += (errorsBox.textContent ? "\n" : "") + msg; console.error(msg); }

    function preloadImages(sources) {
      const promises = sources.map(src => new Promise((resolve, reject) => {
        const img = new Image();
        img.onload = () => resolve(img);
        img.onerror = () => reject(new Error("Image not found: " + src));
        img.src = src;
      }));
      return Promise.allSettled(promises).then(results => {
        const ok = results.filter(r => r.status === "fulfilled").map(r => r.value);
        const bad = results.filter(r => r.status === "rejected").map(r => r.reason.message);
        bad.forEach(showError);
        return ok;
      });
    }

    // ---------- COLLAGE ----------
    function buildCollage(images) {
      const collage = document.getElementById("collage");
      collage.innerHTML = "";
      const zones = [
        { top: "65%", left: "10%" },
        { top: "65%", left: "70%" },
        { top: "30%", left: "20%" },
        { top: "30%", left: "65%" },
        { top: "50%", left: "45%" }
      ];
      zones.forEach(zone => {
        const img = images[Math.floor(Math.random() * images.length)].cloneNode();
        img.style.position = "absolute";
        img.style.width = (100 + Math.random()*120) + "px";
        img.style.top = zone.top;
        img.style.left = zone.left;
        img.style.transform = `translate(-50%,-50%) rotate(${Math.random()*20-10}deg)`;
        img.style.opacity = 0.9;
        collage.appendChild(img);
      });
    }

    // ---------- CANVAS ----------
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");
    function resize() { canvas.width = window.innerWidth; canvas.height = window.innerHeight; }
    resize(); window.addEventListener("resize", resize);

    // ---------- EFFECTS ----------
    class Leaf {
      constructor(images) { this.images = images; this.reset(true); }
      reset(first = false) {
        const w = canvas.width, h = canvas.height;
        this.x = Math.random() * w;
        this.y = first ? Math.random() * -h : -20;
        this.size = 24 + Math.random() * 36;
        this.speed = 1 + Math.random() * 2;
        this.angle = Math.random() * Math.PI * 2;
        this.spin  = 0.01 + Math.random() * 0.02;
        this.img   = this.images.length ? this.images[Math.floor(Math.random() * this.images.length)] : null;
        this.color = ["#ff9f1c", "#ffbf69", "#d62828", "#f77f00"][Math.floor(Math.random()*4)];
      }
      update() { this.y += this.speed; this.angle += this.spin; this.x += Math.sin(this.angle) * 0.6; if (this.y > canvas.height + this.size) this.reset(); }
      draw() {
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.rotate(this.angle);
        if (this.img) ctx.drawImage(this.img, -this.size/2, -this.size/2, this.size, this.size);
        else { ctx.fillStyle = this.color; ctx.beginPath(); ctx.ellipse(0,0,this.size/2.2,this.size/1.3,0,0,Math.PI*2); ctx.fill(); ctx.strokeStyle="rgba(0,0,0,0.15)"; ctx.stroke(); }
        ctx.restore();
      }
    }

    class Raindrop { constructor(heavy=false){ this.heavy = heavy; this.reset(true); } reset(first=false){ const w=canvas.width,h=canvas.height; this.x=Math.random()*w; this.y=first?Math.random()*-h:-10; this.length=this.heavy?20+Math.random()*10:10+Math.random()*6; this.speed=this.heavy?8+Math.random()*4:4+Math.random()*3; this.opacity=this.heavy?0.6:0.35; } update(){ this.y+=this.speed; if(this.y>canvas.height+this.length)this.reset(); } draw(){ ctx.strokeStyle=`rgba(255,255,255,${this.opacity})`; ctx.lineWidth=1; ctx.beginPath(); ctx.moveTo(this.x,this.y); ctx.lineTo(this.x,this.y+this.length); ctx.stroke(); } }

    class WindLine { constructor(){ this.reset(); } reset(){ this.y=Math.random()*canvas.height; this.length=100+Math.random()*220; this.speed=1+Math.random()*2; this.amplitude=18+Math.random()*28; this.frequency=0.01+Math.random()*0.02; this.x=-this.length; this.opacity=0.12+Math.random()*0.1; } update(){ this.x+=this.speed*2; if(this.x>canvas.width+this.length)this.reset(); } draw(){ ctx.strokeStyle=`rgba(255,255,255,${this.opacity})`; ctx.lineWidth=2; ctx.beginPath(); for(let i=0;i<this.length;i+=10){ const px=this.x+i; const py=this.y+Math.sin(i*this.frequency+Date.now()*0.002)*this.amplitude; if(i===0)ctx.moveTo(px,py); else ctx.lineTo(px,py); } ctx.stroke(); } }

    // ---------- SOUNDS ----------
    const startBtn = document.getElementById("startSound");
    const rainAudio = new Audio("autumn/sounds_autumn/rain.mp3");
    const rainfallAudio = new Audio("autumn/sounds_autumn/rainfall.mp3");
    const windAudio = new Audio("autumn/sounds_autumn/wind.mp3");
    rainAudio.loop = rainfallAudio.loop = windAudio.loop = true;
    rainfallAudio.volume=0.3; rainAudio.volume=0.5; windAudio.volume=0.5;

    const modes=[0,1,2,3,4];
    const mode=modes[Math.floor(Math.random()*modes.length)];

    startBtn.addEventListener("click", ()=>{
      if(mode===0)windAudio.play().catch(()=>{});
      else if(mode===1)rainAudio.play().catch(()=>{});
      else if(mode===2)rainfallAudio.play().catch(()=>{});
      else if(mode===3)rainAudio.play().catch(()=>{});
      else if(mode===4)windAudio.play().catch(()=>{});
      startBtn.style.display="none";
    });

    // ---------- CLOUDS + FOG ----------
    function createClouds(heavy=false){ const container=document.getElementById("clouds"); container.innerHTML=""; const count=heavy?12:6; for(let i=0;i<count;i++){ const cloud=document.createElement("div"); cloud.className="cloud"; cloud.style.width=(120+Math.random()*180)+"px"; cloud.style.height=(60+Math.random()*80)+"px"; cloud.style.top=(Math.random()*20)+"%"; cloud.style.left=(-200+Math.random()*100)+"px"; cloud.style.opacity=heavy?0.9:0.7; container.appendChild(cloud); animateCloud(cloud); } }
    function animateCloud(cloud){ let pos=parseInt(cloud.style.left); function move(){ pos+=0.3; cloud.style.left=pos+"px"; if(pos<window.innerWidth+200){ requestAnimationFrame(move); } else cloud.remove(); } move(); }
    function createFog(){ const container=document.getElementById("fog"); container.innerHTML=""; for(let i=0;i<4;i++){ const fog=document.createElement("div"); fog.className="fog"; fog.style.width=(300+Math.random()*400)+"px"; fog.style.height=(100+Math.random()*200)+"px"; fog.style.bottom=(Math.random()*15)+"%"; fog.style.left=(Math.random()*80)+"%"; fog.style.opacity=0.25+Math.random()*0.15; container.appendChild(fog); } }

    // ---------- LEAF CARPET ----------
    function buildLeafCarpet(images){
      const carpet=document.getElementById("leafCarpet");
      carpet.innerHTML="";
      const width=window.innerWidth;
      const layers=[
        {density:Math.floor(width/18),size:[50,80],opacity:1.0,z:3},
        {density:Math.floor(width/22),size:[35,55],opacity:0.85,z:2},
        {density:Math.floor(width/26),size:[20,40],opacity:0.7,z:1}
      ];
      layers.forEach(layer=>{
        for(let i=0;i<layer.density;i++){
          const img=images[Math.floor(Math.random()*images.length)].cloneNode();
          img.style.position="absolute";
          img.style.bottom=-(Math.random()*10)+"px";
          img.style.left=Math.random()*width+"px";
          const size=layer.size[0]+Math.random()*(layer.size[1]-layer.size[0]);
          img.style.width=size+"px";
          img.style.transform=`rotate(${Math.random()*360}deg)`;
          img.style.opacity=layer.opacity;
          img.style.zIndex=layer.z;
          carpet.appendChild(img);
        }
      });
    }

    // ---------- MAIN ----------
    let leaves=[], drops=[], windLines=[], leafImages=[];
    function buildScene(){
      if(mode===0||mode===3||mode===4){ const count=mode===4?50:(mode===0?40:30); for(let i=0;i<count;i++)leaves.push(new Leaf(leafImages)); }
      if(mode===1||mode===2||mode===3){ const heavy=(mode===2); const n=heavy?200:(mode===3?120:100); for(let i=0;i<n;i++)drops.push(new Raindrop(heavy)); }
      if(mode===0||mode===4){ const n=mode===4?7:5; for(let i=0;i<n;i++)windLines.push(new WindLine()); }

      if(mode===2){ document.getElementById("overlay").style.display="block"; createClouds(true); }
      else if(mode===1||mode===3){ createClouds(false); if(Math.random()<0.3)createFog(); }
      else if(mode===0||mode===4){ if(Math.random()<0.1)createFog(); }

      buildLeafCarpet(leafImages);
    }

    function animate(){
      ctx.clearRect(0,0,canvas.width,canvas.height);
      leaves.forEach(l=>{l.update();l.draw();});
      drops.forEach(d=>{d.update();d.draw();});
      windLines.forEach(w=>{w.update();w.draw();});
      requestAnimationFrame(animate);
    }

    // ---------- INIT ----------
    Promise.all([ preloadImages(leafSources), preloadImages(collageElements) ])
      .then(([leafImgs, decorImgs])=>{
        leafImages=leafImgs;
        buildCollage(decorImgs);
        buildScene();
        animate();
      });
  </script>
</body>
</html>
