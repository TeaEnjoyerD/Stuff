<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Cozy Autumn</title>
  <style>
    :root {
      --text-shadow: 2px 2px 4px rgba(0,0,0,0.7);
    }
    * { box-sizing: border-box; }
    body {
  margin: 0;
  padding: 0;
  height: 100vh;
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  overflow: hidden;
  position: relative;
}


    /* üì± –î–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ –ø–ª–∞–Ω—à–µ—Ç–æ–≤ */
    @media (max-width: 768px) {
      body {
        background-size: contain;   /* –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Ü–µ–ª–∏–∫–æ–º */
        background-color: #000;     /* —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω –ø–æ –±–æ–∫–∞–º */
      }
    }

    #date {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 10;
      font-size: 28px;
      padding: 8px 14px;
      border-radius: 12px;
      background: rgba(0,0,0,0.18);
      backdrop-filter: blur(3px);
    }
    #startSound {
      position: absolute;
      left: 50%;
      bottom: 20px;
      transform: translateX(-50%);
      z-index: 20;
      padding: 10px 18px;
      border: none;
      border-radius: 10px;
      font-size: 16px;
      color: #fff;
      background: rgba(0,0,0,0.35);
      backdrop-filter: blur(6px);
      cursor: pointer;
    }
    canvas {
      position: fixed;
      inset: 0;
      width: 100vw;
      height: 100vh;
      z-index: 5;              /* —Ä–∏—Å—É–µ–º –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞, –Ω–æ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π */
      pointer-events: none;    /* —á—Ç–æ–±—ã –∫–ª–∏–∫–∏ –¥–æ—Ö–æ–¥–∏–ª–∏ –¥–æ –∫–Ω–æ–ø–∫–∏ */
    }
    #errors {
      position: fixed;
      right: 10px;
      bottom: 10px;
      z-index: 30;
      max-width: 40ch;
      padding: 8px 10px;
      border-radius: 8px;
      font: 12px/1.3 system-ui, sans-serif;
      background: rgba(0,0,0,0.6);
      color: #ffdddd;
      display: none;
      white-space: pre-wrap;
    }
  </style>
</head>
<body>
  <div id="date"></div>
  <button id="startSound">‚ñ∂ Play Sound</button>
  <canvas id="canvas"></canvas>
  <div id="errors"></div>

  <script>
    // ---------- DATE ----------
    const dateEl = document.getElementById("date");
    const now = new Date();
    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    dateEl.textContent = now.toLocaleDateString("en-US", options);

    // ---------- PATHS ----------
    const backgroundSources = [
      "autumn/images_autumn/background/background1.png",
      "autumn/images_autumn/background/background2.png",
      "autumn/images_autumn/background/background3.png"
    ];
    const leafSources = [
      "autumn/images_autumn/leaves/leaf1.png",
      "autumn/images_autumn/leaves/leaf2.png",
      "autumn/images_autumn/leaves/leaf3.png",
      "autumn/images_autumn/leaves/leaf4.png"
    ];

    // ---------- PRELOAD HELPERS ----------
    const errorsBox = document.getElementById("errors");
    function showError(msg) {
      errorsBox.style.display = "block";
      errorsBox.textContent += (errorsBox.textContent ? "\n" : "") + msg;
      console.error(msg);
    }

    function preloadImages(sources) {
      const promises = sources.map(src => new Promise((resolve, reject) => {
        const img = new Image();
        img.onload = () => resolve(img);
        img.onerror = () => reject(new Error("Image not found: " + src));
        img.src = src;
      }));
      return Promise.allSettled(promises).then(results => {
        const ok = results.filter(r => r.status === "fulfilled").map(r => r.value);
        const bad = results.filter(r => r.status === "rejected").map(r => r.reason.message);
        bad.forEach(showError);
        return ok;
      });
    }

    // ---------- BACKGROUND ----------
    (function pickBackground() {
      const bg = backgroundSources[Math.floor(Math.random() * backgroundSources.length)];
      document.body.style.backgroundImage = `url(${bg})`;
    })();

    // ---------- CANVAS ----------
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");
    function resize() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
    resize();
    window.addEventListener("resize", resize);

    // ---------- EFFECTS ----------
    class Leaf {
      constructor(images) {
        this.images = images;
        this.reset(true);
      }
      reset(first = false) {
        const w = canvas.width, h = canvas.height;
        this.x = Math.random() * w;
        this.y = first ? Math.random() * -h : -20;
        this.size = 24 + Math.random() * 36;
        this.speed = 1 + Math.random() * 2;
        this.angle = Math.random() * Math.PI * 2;
        this.spin  = 0.01 + Math.random() * 0.02;
        this.img   = this.images.length ? this.images[Math.floor(Math.random() * this.images.length)] : null;
        this.color = ["#ff9f1c", "#ffbf69", "#d62828", "#f77f00"][Math.floor(Math.random()*4)];
      }
      update() {
        this.y += this.speed;
        this.angle += this.spin;
        this.x += Math.sin(this.angle) * 0.6;
        if (this.y > canvas.height + this.size) this.reset();
      }
      draw() {
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.rotate(this.angle);
        if (this.img) {
          ctx.drawImage(this.img, -this.size/2, -this.size/2, this.size, this.size);
        } else {
          ctx.fillStyle = this.color;
          ctx.beginPath();
          ctx.ellipse(0, 0, this.size/2.2, this.size/1.3, 0, 0, Math.PI*2);
          ctx.fill();
          ctx.strokeStyle = "rgba(0,0,0,0.15)";
          ctx.stroke();
        }
        ctx.restore();
      }
    }

    class Raindrop {
      constructor(heavy=false) {
        this.heavy = heavy;
        this.reset(true);
      }
      reset(first=false) {
        const w = canvas.width, h = canvas.height;
        this.x = Math.random() * w;
        this.y = first ? Math.random() * -h : -10;
        this.length = this.heavy ? 20 + Math.random()*10 : 10 + Math.random()*6;
        this.speed  = this.heavy ? 8 + Math.random()*4  : 4 + Math.random()*3;
        this.opacity = this.heavy ? 0.6 : 0.35;
      }
      update() {
        this.y += this.speed;
        if (this.y > canvas.height + this.length) this.reset();
      }
      draw() {
        ctx.strokeStyle = `rgba(255,255,255,${this.opacity})`;
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.moveTo(this.x, this.y);
        ctx.lineTo(this.x, this.y + this.length);
        ctx.stroke();
      }
    }

    class WindLine {
      constructor() {
        this.reset();
      }
      reset() {
        this.y = Math.random() * canvas.height;
        this.length = 100 + Math.random() * 220;
        this.speed = 1 + Math.random() * 2;
        this.amplitude = 18 + Math.random() * 28;
        this.frequency = 0.01 + Math.random() * 0.02;
        this.x = -this.length;
        this.opacity = 0.12 + Math.random() * 0.1;
      }
      update() {
        this.x += this.speed * 2;
        if (this.x > canvas.width + this.length) this.reset();
      }
      draw() {
        ctx.strokeStyle = `rgba(255,255,255,${this.opacity})`;
        ctx.lineWidth = 2;
        ctx.beginPath();
        for (let i = 0; i < this.length; i += 10) {
          const px = this.x + i;
          const py = this.y + Math.sin(i * this.frequency + Date.now() * 0.002) * this.amplitude;
          if (i === 0) ctx.moveTo(px, py);
          else ctx.lineTo(px, py);
        }
        ctx.stroke();
      }
    }

    // ---------- SOUNDS ----------
    const startBtn = document.getElementById("startSound");
    const rainAudio = new Audio("autumn/sounds_autumn/rain.mp3");
    const rainfallAudio = new Audio("autumn/sounds_autumn/rainfall.mp3");
    const windAudio = new Audio("autumn/sounds_autumn/wind.mp3");
    rainAudio.loop = rainfallAudio.loop = windAudio.loop = true;
    rainfallAudio.volume = 0.3; // –ª–∏–≤–µ–Ω—å —Ç–∏—à–µ
    rainAudio.volume = 0.5;
    windAudio.volume = 0.5;

    // ---------- MODE ----------
    const modes = [0,1,2,3,4]; // 0: –ª–∏—Å—Ç—å—è, 1: –¥–æ–∂–¥—å, 2: –ª–∏–≤–µ–Ω—å, 3: –ª–∏—Å—Ç—å—è+–¥–æ–∂–¥—å, 4: –ª–∏—Å—Ç—å—è+–≤–µ—Ç–µ—Ä
    const mode = modes[Math.floor(Math.random() * modes.length)];

    startBtn.addEventListener("click", () => {
      if (mode === 0) { windAudio.play().catch(()=>{}); }
      else if (mode === 1) { rainAudio.play().catch(()=>{}); }
      else if (mode === 2) { rainfallAudio.play().catch(()=>{}); }
      else if (mode === 3) { rainAudio.play().catch(()=>{}); }
      else if (mode === 4) { windAudio.play().catch(()=>{}); }
      startBtn.style.display = "none";
    });

    // ---------- MAIN ----------
    let leaves = [], drops = [], windLines = [];
    let leafImages = [];

    function buildScene() {
      if (mode === 0 || mode === 3 || mode === 4) {
        const count = mode === 4 ? 50 : (mode === 0 ? 40 : 30);
        for (let i = 0; i < count; i++) leaves.push(new Leaf(leafImages));
      }
      if (mode === 1 || mode === 2 || mode === 3) {
        const heavy = (mode === 2);
        const n = heavy ? 200 : (mode === 3 ? 120 : 100);
        for (let i = 0; i < n; i++) drops.push(new Raindrop(heavy));
      }
      if (mode === 0 || mode === 4) {
        const n = mode === 4 ? 7 : 5;
        for (let i = 0; i < n; i++) windLines.push(new WindLine());
      }
    }

    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      leaves.forEach(l => { l.update(); l.draw(); });
      drops.forEach(d => { d.update(); d.draw(); });
      windLines.forEach(w => { w.update(); w.draw(); });
      requestAnimationFrame(animate);
    }

    preloadImages(leafSources).then(images => {
      leafImages = images;
      buildScene();
      animate();
    });
  </script>
</body>
</html>
